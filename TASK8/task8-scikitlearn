from sklearn.linear_model import LinearRegression
import numpy as np

# Create data
X = np.array([[1], [2], [3], [4], [5]])
y = np.array([2, 4, 6, 8, 10])

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Make predictions
predictions = model.predict(np.array([[6]]))
print("Prediction for 6:", predictions)

#k-means clustering
from sklearn.cluster import KMeans
import numpy as np

# Create data
X = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])

# Create and train the model
kmeans = KMeans(n_clusters=2)
kmeans.fit(X)

# Print cluster centers
print("Cluster Centers:\n", kmeans.cluster_centers_)

#decision tree classification
from sklearn.tree import DecisionTreeClassifier
from sklearn.datasets import load_iris

# Load data
iris = load_iris()
X, y = iris.data, iris.target

# Create and train the model
clf = DecisionTreeClassifier()
clf.fit(X, y)

# Make predictions
predictions = clf.predict(X[:5])
print("Predictions:", predictions)

#cross validation
from sklearn.model_selection import cross_val_score
from sklearn.datasets import load_iris
from sklearn.svm import SVC

# Load data
iris = load_iris()
X, y = iris.data, iris.target

# Create model
model = SVC()

# Perform cross-validation
scores = cross_val_score(model, X, y, cv=5)
print("Cross-Validation Scores:", scores)

#PCA
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris

# Load data
iris = load_iris()
X = iris.data

# Create and apply PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

print("PCA Result:\n", X_pca[:5])

#Returning Multiple Values
def f():
 a = 5
 b = 6
 c = 7
 return a, b, c
a, b, c = f()

#tuples
In [2]: tup = (4, 5, 6)
In [3]: tup
Out[3]: (4, 5, 6)
In [4]: nested_tup = (4, 5, 6), (7, 8)
#multiplying tuple by integer
In [19]: ('foo', 'bar') * 4
Out[19]: ('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar'
#concatenating tuples
In [20]: ('foo', 'bar') + ('baz', 'qux')
Out[20]: ('foo', 'bar', 'baz', 'qux')
#unpacking tuples   
In [21]: tup = (4, 5, 6)
In [22]: a, b, c = tup
In [23]: b
Out[23]: 5
#swapping variables

In [24]: a, b = 1, 2
In [25]: a
Out[25]: 1
In [26]: b
Out[26]: 2
In [27]: b, a = a, b
In [28]: a
Out[28]: 2
In [29]: b

#converting a tuple to a list
In [30]: tup = (4, 5, 6)
In [31]: tup
Out[31]: (4, 5, 6)
In [32]: list(tup)
Out[32]: [4, 5, 6]
#converting a list to a tuple
In [33]: list = [4, 0, 2]
In [34]: list
Out[34]: [4, 0, 2]
In [35]: tup = tuple(list)
In [36]: tup
Out[36]: (4, 0, 2)
#unpacking tuples
In [37]: tup = (4, 5, (6, 7))
In [38]: a, b, (c, d) = tup
In [39]: d
Out[39]: 7
#lists
In [40]: a_list = [2, 3, 7, None]
In [41]: tup = ('foo', 'bar', 'baz')
In [42]: b_list = list(tup)
In [43]: b_list
Out[43]: ['foo', 'bar', 'baz']
In [44]: b_list[1] = 'peekaboo'
In [45]: b_list
Out[45]: ['foo', 'peekaboo', 'baz']
#adding and removing elements
In [46]: b_list.append('dwarf')
In [47]: b_list
Out[47]: ['foo', 'peekaboo', 'baz', 'dwarf']
In [48]: b_list.insert(1, 'red')
In [49]: b_list
In [59]: b_list.remove("foo")
In [60]: b_list
Out[60]: ['red', 'baz', 'dwarf', 'foo']
#dictionary
In [83]: empty_dict = {}
In [84]: d1 = {"a": "some value", "b": [1, 2, 3, 4]}
In [85]: d1
Out[85]: {'a': 'some value', 'b': [1, 2, 3, 4]}
In [86]: d1[7] = "an integer"
In [87]: d1
Out[87]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}
In [88]: d1["b"]
Out[88]: [1, 2, 3, 4]
In [89]: "b" in d1
Out[89]: True
In [90]: d1[5] = "some value"
In [91]: d1
Out[91]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 5: 'some value'}
In [92]: d1["dummy"] = "another value"
In [93]: d1
Out[93]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 5: 'some value', 'dummy': 'another value'}
In [94]: del d1[5]
In [95]: d1
Out[95]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer', 'dummy': 'another value'}
In [96]: ret = d1.pop("dummy")
In [97]: ret
Out[97]: 'another value'
In [98]: d1
Out[98]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}
In [99]: list(d1.keys())
Out[99]: ['a', 'b', 7]
In [100]: list(d1.values())
Out[100]: ['some value', [1, 2, 3, 4], 'an integer']
In [101]: d1.update({"b": "foo", "c": 12})
In [102]: d1
Out[102]: {'a': 'some value', 'b': 'foo', 7: 'an integer', 'c': 12}

#creating dicts from sequences
In [103]: mapping = dict(zip(range(5), reversed(range(5)))
In [104]: mapping
Out[104]: {0: 4, 1: 3, 2: 2, 3: 1, 4: 0}
#default values
In [105]: words = ["apple", "bat", "bar", "atom", "book"]
In [106]: by_letter = {}
In [107]: for word in words:
     ...:     letter = word[0]
     ...:     if letter not in by_letter:
     ...:         by_letter[letter] = [word]
     ...:     else:
     ...:         by_letter[letter].append(word)
     ...:   
In [108]: by_letter
Out[108]: {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}
#valid dict key types
In [109]: hash("string")
Out[109]: 873696218
In [110]: hash((1, 2, (2, 3)))
Out[110]: 1097636502276347782
In [111]: hash((1, 2, [2, 3]))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
#sets
In [112]: set([2, 2, 2, 1, 3, 3])
Out[112]: {1, 2, 3}
In [113]: {2, 2, 2, 1, 3, 3}
Out[113]: {1, 2, 3}
In [114]: a = {1, 2, 3, 4, 5}
In [115]: b = {3, 4, 5, 6, 7, 8}
In [116]: a.union(b)

Out[116]: {1, 2, 3, 4, 5, 6, 7, 8}
In [117]: a | b

Out[117]: {1, 2, 3, 4, 5, 6, 7, 8}
In [118]: a.intersection(b)
Out[118]: {3, 4, 5}
In [119]: a & b
Out[119]: {3, 4, 5}
In [120]: c = a.copy()
In [121]: c |= b
In [122]: c     
Out[122]: {1, 2, 3, 4, 5, 6, 7, 8}
In [123]: d = a.copy()
In [124]: d &= b
In [125]: d
Out[125]: {3, 4, 5}




